{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","numChar","disabled","drawRing","stroke","strokeDasharray","countChar","bind","event","target","value","split","length","tweetedText","this","setState","handleChange","circleLength","Math","PI","colored","gray","console","log","id","React","Component","Tweet","TweetText","placeholder","onChange","Counter","cx","cy","r","style","TweetedText","SubmitButton","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uQAKMA,G,wDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAO,CACVC,QAAQ,EACRC,UAAU,EACVC,SAAS,CACPC,OAAO,GACPC,gBAAiB,KAIrB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAZD,E,sDAkBRC,GACR,IAAMP,EAAiC,KAAvBO,EAAMC,OAAOC,MAAe,EAAIF,EAAMC,OAAOC,MAAMC,MAAM,KAAKC,OACxEC,EAAcL,EAAMC,OAAOC,MAGjCI,KAAKC,UAAS,iBAAK,CACjBd,QAASA,EACTY,YAAaA,MAIfC,KAAKX,WAELW,KAAKE,iB,qCAKFF,KAAKd,MAAMC,SAAW,GACvBa,KAAKC,SAAS,CACZb,UAAS,IAIXY,KAAKC,SAAS,CACZb,UAAS,M,iCAKJ,IAAD,OAEFe,EAAe,EAAEC,KAAKC,GADnB,GAILC,EAAWH,EAAeH,KAAKd,MAAMC,QAAS,GAC9CoB,EAAOJ,EAAeG,EAAU,EAAIH,EAAeG,EAAU,EAEjEN,KAAKC,UAAS,SAACf,GAAD,MAAW,CACvBG,SAAS,CAELC,OAAS,GAAK,EAAKJ,MAAMC,SAAY,EAAI,MAChC,GAAK,EAAKD,MAAMC,SAAW,GAAK,SAT3B,oBAWdI,gBAAgB,GAAD,OAAKe,EAAL,YAAgBC,U,+BASrC,OAFAC,QAAQC,IAAIT,KAAKd,MAAMC,SACvBqB,QAAQC,IAAIT,KAAKd,MAAMa,aAErB,yBAAKW,GAAG,OACN,uDACA,kBAAC,EAAD,CAAOlB,UAAWQ,KAAKR,UAAWL,QAASa,KAAKd,MAAMC,QAASE,SAAUW,KAAKd,MAAMG,SAAUU,YAAaC,KAAKd,MAAMa,YAAaX,SAAUY,KAAKd,MAAME,WAF1J,S,GA1EYuB,IAAMC,YAoFlBC,E,uKAEF,OACE,yBAAKH,GAAG,SACN,kBAAC,EAAD,CAAWlB,UAAWQ,KAAKf,MAAMO,YACjC,kBAAC,EAAD,CAASL,QAASa,KAAKf,MAAME,QAASE,SAAWW,KAAKf,MAAMI,WAC5D,kBAAC,EAAD,CAAaU,YAAaC,KAAKf,MAAMc,cACrC,kBAAC,EAAD,CAAcX,SAAUY,KAAKf,MAAMG,gB,GAPvBuB,IAAMC,WAcpBE,E,uKAEF,OACE,yBAAKJ,GAAG,aACN,8BAAUK,YAAY,yBAAyBC,SAAUhB,KAAKf,MAAMO,YADtE,S,GAHkBmB,IAAMC,WAcxBK,E,uKAEF,OACE,yBAAKP,GAAG,WACN,gDAAsBV,KAAKf,MAAME,QAAjC,WADF,IAEE,6BACE,4BAAQuB,GAAG,OAAOQ,GAAG,MAAMC,GAAG,MAAMC,EAAE,OACtC,4BAAQV,GAAG,UAAUQ,GAAG,MAAMC,GAAG,MAAMC,EAAE,KAAKC,MAAOrB,KAAKf,MAAMI,WAFlE,U,GALcsB,IAAMC,WAetBU,E,uKAEF,OACE,yBAAKZ,GAAG,eACN,2BAAIV,KAAKf,MAAMc,aADjB,S,GAHoBY,IAAMC,WAW1BW,E,uKAEF,OACE,yBAAKb,GAAG,gBACN,4BAAQtB,SAAUY,KAAKf,MAAMG,UAA7B,SADF,S,GAHqBuB,IAAMC,WAUlB5B,IC7IKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.abfd00cb.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\n// 1st component\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state ={\n      numChar:0,\n      disabled: true,\n      drawRing:{\n        stroke:\"\",\n        strokeDasharray: \"\"\n      }\n    }\n\n    this.countChar = this.countChar.bind(this);\n\n    \n  }\n\n  // words counter function\n  countChar(event){\n    const numChar = event.target.value === \"\" ? 0 : event.target.value.split(\" \").length;\n    const tweetedText = event.target.value;\n    \n    \n    this.setState(()=>({\n      numChar: numChar,\n      tweetedText: tweetedText,\n      \n    }));\n\n    this.drawRing();\n\n    this.handleChange();\n\n  }\n\n  handleChange(){\n    if(this.state.numChar <= 50 ){\n      this.setState({\n        disabled:false\n      }\n      );\n    }else{\n      this.setState({\n        disabled:true\n      });\n    }\n  }\n\n  drawRing(){\n    const r= 15;\n    const circleLength = 2*Math.PI*r;\n    const twitterBlue = \"rgb(29, 161, 242)\";\n\n    let colored = (circleLength * this.state.numChar)/50;\n    let gray = circleLength - colored > 0 ? circleLength - colored : 0;\n\n    this.setState((state) =>({\n      drawRing:{\n        \n          stroke: (50 - this.state.numChar) <= 0 ? \"red\" : \n                  (50 - this.state.numChar) <=10 ? \"orange\": \n                  twitterBlue,\n          strokeDasharray: `${colored} ${gray}`\n        \n      }\n    }));\n  }\n\n  render() {\n    console.log(this.state.numChar);\n    console.log(this.state.tweetedText);\n    return (\n      <div id=\"app\">\n        <h4>Twitter Counting Words!</h4>\n        <Tweet countChar={this.countChar} numChar={this.state.numChar} drawRing={this.state.drawRing} tweetedText={this.state.tweetedText} disabled={this.state.disabled}></Tweet> {/*Pass all the states from Tweet components*/}\n    \n      </div>\n    );\n  }\n}\n\n//2nd component\nclass Tweet extends React.Component{\n  render(){\n    return(\n      <div id=\"tweet\">\n        <TweetText countChar={this.props.countChar} /> \n        <Counter numChar={this.props.numChar} drawRing ={this.props.drawRing}/>\n        <TweetedText tweetedText={this.props.tweetedText}/>\n        <SubmitButton disabled={this.props.disabled}/>\n      </div>\n    );\n  }\n}\n\n//3rd component\nclass TweetText extends React.Component{\n  render(){\n    return(\n      <div id=\"tweetText\">\n        <textarea placeholder=\"What are you thinking?\" onChange={this.props.countChar}></textarea> {/*Passed from Tweet component as a prop */}\n    \n      </div>\n\n    \n    );\n  }\n}\n\n//4th component\nclass Counter extends React.Component{\n  render(){\n    return(\n      <div id=\"counter\">\n        <p>You have inserted {this.props.numChar} words!</p> {/*Passed from Tweet component as a prop in order to show the number of words */}\n        <svg>\n          <circle id=\"gray\" cx=\"50%\" cy=\"50%\" r=\"15\"></circle>\n          <circle id=\"colored\" cx=\"50%\" cy=\"50%\" r=\"15\" style={this.props.drawRing}></circle> {/*Passed from Tweet component as a prop in order to draw the svg circle */}\n        </svg>       \n      </div>\n    );\n  }\n}\n\n//5th component\nclass TweetedText extends React.Component{\n  render(){\n    return(\n      <div id=\"tweetedtext\">\n        <p>{this.props.tweetedText}</p> {/*Passed from Tweet component as a prop */}\n      </div>\n    );\n  }\n}\n\n//6th component\nclass SubmitButton extends React.Component{\n  render(){\n    return(\n      <div id=\"submitButton\">\n        <button disabled={this.props.disabled}>Tweet</button> {/*Passed from Tweet component as a prop */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}